/*
 * TestManagement Studio Backend API
 *
 * <<Some text >>   Would respond with: ```js callbackFunction({     ... }); ``` 
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace TestManagementStudioService.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Permission : Entity,  IEquatable<Permission>
    {


        public Permission() : base()
        {
            this.Read = default(Boolean);
            this.Write = default(Boolean);
            this.Subject = default(Actor);
            this.Object = default(SecuredEntity);
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Permission" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Description">Description.</param>
        /// <param name="CreatedAt">CreatedAt.</param>
        /// <param name="DeleteddAt">DeleteddAt.</param>
        /// <param name="Deleted">Deleted.</param>
        /// <param name="UpdatedTo">UpdatedTo.</param>
        /// <param name="Permissions">Permissions.</param>
        /// <param name="Read">Read.</param>
        /// <param name="Write">Write.</param>
        /// <param name="Subject">Subject.</param>
        /// <param name="Object">Object.</param>
        /// <param name="ObjectType">Discriminator to the actors. Group | user.</param>
        public Permission(int? Id = default(int?), string Description = default(string), DateTime? CreatedAt = default(DateTime?), DateTime? DeleteddAt = default(DateTime?), bool? Deleted = default(bool?), DateTime? UpdatedTo = default(DateTime?), List<Permission> Permissions = default(List<Permission>), bool? Read = default(bool?), bool? Write = default(bool?), Actor Subject = default(Actor), Entity Object = default(Entity))
        {
            this.Id = Id;
            this.Description = Description;
            this.CreatedAt = CreatedAt;
            this.DeleteddAt = DeleteddAt;
            this.Deleted = Deleted;
            this.UpdatedTo = UpdatedTo;
           
            this.Read = Read;
            this.Write = Write;
            this.Subject = Subject;
            this.Object = Object;
            
        }

       
        /// <summary>
        /// Gets or Sets Read
        /// </summary>
        [DataMember(Name="read")]
        public bool? Read { get; set; }
        /// <summary>
        /// Gets or Sets Write
        /// </summary>
        [DataMember(Name="write")]
        public bool? Write { get; set; }
        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name="subject")]
        public Actor Subject { get; set; }
        /// <summary>
        /// Gets or Sets Object
        /// </summary>
        [DataMember(Name="object")]
        public Entity Object { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Permission {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DeleteddAt: ").Append(DeleteddAt).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  UpdatedTo: ").Append(UpdatedTo).Append("\n");
            sb.Append("  Read: ").Append(Read).Append("\n");
            sb.Append("  Write: ").Append(Write).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((Permission)obj);
        }

        /// <summary>
        /// Returns true if Permission instances are equal
        /// </summary>
        /// <param name="other">Instance of Permission to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Permission other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.DeleteddAt == other.DeleteddAt ||
                    this.DeleteddAt != null &&
                    this.DeleteddAt.Equals(other.DeleteddAt)
                ) && 
                (
                    this.Deleted == other.Deleted ||
                    this.Deleted != null &&
                    this.Deleted.Equals(other.Deleted)
                ) && 
                (
                    this.UpdatedTo == other.UpdatedTo ||
                    this.UpdatedTo != null &&
                    this.UpdatedTo.Equals(other.UpdatedTo)
                ) && 
                
                (
                    this.Read == other.Read ||
                    this.Read != null &&
                    this.Read.Equals(other.Read)
                ) && 
                (
                    this.Write == other.Write ||
                    this.Write != null &&
                    this.Write.Equals(other.Write)
                ) && 
                (
                    this.Subject == other.Subject ||
                    this.Subject != null &&
                    this.Subject.Equals(other.Subject)
                ) && 
                (
                    this.Object == other.Object ||
                    this.Object != null &&
                    this.Object.Equals(other.Object)
                ) ;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                    if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                    if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                    if (this.DeleteddAt != null)
                    hash = hash * 59 + this.DeleteddAt.GetHashCode();
                    if (this.Deleted != null)
                    hash = hash * 59 + this.Deleted.GetHashCode();
                    if (this.UpdatedTo != null)
                    hash = hash * 59 + this.UpdatedTo.GetHashCode();                   
                    if (this.Read != null)
                    hash = hash * 59 + this.Read.GetHashCode();
                    if (this.Write != null)
                    hash = hash * 59 + this.Write.GetHashCode();
                    if (this.Subject != null)
                    hash = hash * 59 + this.Subject.GetHashCode();
                    if (this.Object != null)
                    hash = hash * 59 + this.Object.GetHashCode();
                    
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(Permission left, Permission right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Permission left, Permission right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
