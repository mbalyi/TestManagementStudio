/*
 * TestManagement Studio Backend API
 *
 * <<Some text >>   Would respond with: ```js callbackFunction({     ... }); ``` 
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace TestManagementStudioService.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TestExecution : Entity,  IEquatable<TestExecution>
    {

        public TestExecution() : base()
        {
            this.Test = default(Test);
            this.AnswersGiven = new List<Answer>();
            this.DateOfStart = default(DateTime);
            this.DateOfFill = default(DateTime);
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="TestExecution" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Description">Description.</param>
        /// <param name="CreatedAt">CreatedAt.</param>
        /// <param name="DeleteddAt">DeleteddAt.</param>
        /// <param name="Deleted">Deleted.</param>
        /// <param name="UpdatedTo">UpdatedTo.</param>
        /// <param name="Test">Test.</param>
        /// <param name="AnswersGiven">AnswersGiven.</param>
        /// <param name="DateOfStart">DateOfStart.</param>
        /// <param name="DateOfFill">DateOfFill.</param>
        public TestExecution(int? Id = default(int?), string Description = default(string), DateTime? CreatedAt = default(DateTime?), DateTime? DeleteddAt = default(DateTime?), bool? Deleted = default(bool?), DateTime? UpdatedTo = default(DateTime?), Test Test = default(Test), List<Answer> AnswersGiven = default(List<Answer>), DateTime? DateOfStart = default(DateTime?), DateTime? DateOfFill = default(DateTime?))
        {
            this.Id = Id;
            this.Description = Description;
            this.CreatedAt = CreatedAt;
            this.DeleteddAt = DeleteddAt;
            this.Deleted = Deleted;
            this.UpdatedTo = UpdatedTo;
            this.Test = Test;
            this.AnswersGiven = AnswersGiven;
            this.DateOfStart = DateOfStart;
            this.DateOfFill = DateOfFill;
            
        }
        
        /// <summary>
        /// Gets or Sets Test
        /// </summary>
        [DataMember(Name="test")]
        public Test Test { get; set; }
        /// <summary>
        /// Gets or Sets AnswersGiven
        /// </summary>
        [DataMember(Name="answersGiven")]
        public List<Answer> AnswersGiven { get; set; }
        /// <summary>
        /// Gets or Sets DateOfStart
        /// </summary>
        [DataMember(Name="dateOfStart")]
        public DateTime? DateOfStart { get; set; }
        /// <summary>
        /// Gets or Sets DateOfFill
        /// </summary>
        [DataMember(Name="dateOfFill")]
        public DateTime? DateOfFill { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TestExecution {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DeleteddAt: ").Append(DeleteddAt).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  UpdatedTo: ").Append(UpdatedTo).Append("\n");
            sb.Append("  Test: ").Append(Test).Append("\n");
            sb.Append("  AnswersGiven: ").Append(AnswersGiven).Append("\n");
            sb.Append("  DateOfStart: ").Append(DateOfStart).Append("\n");
            sb.Append("  DateOfFill: ").Append(DateOfFill).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((TestExecution)obj);
        }

        /// <summary>
        /// Returns true if TestExecution instances are equal
        /// </summary>
        /// <param name="other">Instance of TestExecution to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TestExecution other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.DeleteddAt == other.DeleteddAt ||
                    this.DeleteddAt != null &&
                    this.DeleteddAt.Equals(other.DeleteddAt)
                ) && 
                (
                    this.Deleted == other.Deleted ||
                    this.Deleted != null &&
                    this.Deleted.Equals(other.Deleted)
                ) && 
                (
                    this.UpdatedTo == other.UpdatedTo ||
                    this.UpdatedTo != null &&
                    this.UpdatedTo.Equals(other.UpdatedTo)
                )  && 
                (
                    this.Test == other.Test ||
                    this.Test != null &&
                    this.Test.Equals(other.Test)
                ) && 
                (
                    this.AnswersGiven == other.AnswersGiven ||
                    this.AnswersGiven != null &&
                    this.AnswersGiven.SequenceEqual(other.AnswersGiven)
                ) && 
                (
                    this.DateOfStart == other.DateOfStart ||
                    this.DateOfStart != null &&
                    this.DateOfStart.Equals(other.DateOfStart)
                ) && 
                (
                    this.DateOfFill == other.DateOfFill ||
                    this.DateOfFill != null &&
                    this.DateOfFill.Equals(other.DateOfFill)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                    if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                    if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                    if (this.DeleteddAt != null)
                    hash = hash * 59 + this.DeleteddAt.GetHashCode();
                    if (this.Deleted != null)
                    hash = hash * 59 + this.Deleted.GetHashCode();
                    if (this.UpdatedTo != null)
                    hash = hash * 59 + this.UpdatedTo.GetHashCode();
                    
                    if (this.Test != null)
                    hash = hash * 59 + this.Test.GetHashCode();
                    if (this.AnswersGiven != null)
                    hash = hash * 59 + this.AnswersGiven.GetHashCode();
                    if (this.DateOfStart != null)
                    hash = hash * 59 + this.DateOfStart.GetHashCode();
                    if (this.DateOfFill != null)
                    hash = hash * 59 + this.DateOfFill.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(TestExecution left, TestExecution right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TestExecution left, TestExecution right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
