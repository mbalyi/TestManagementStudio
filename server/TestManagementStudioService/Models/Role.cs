/*
 * TestManagement Studio Backend API
 *
 * <<Some text >>   Would respond with: ```js callbackFunction({     ... }); ``` 
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace TestManagementStudioService.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Role : Entity,  IEquatable<Role>
    {

        public Role() : base()
        {
            this.IsRoot = default(Boolean);
            this.Name = default(String);
            this.Parts = new List<RolePart>();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Role" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Description">Description.</param>
        /// <param name="CreatedAt">CreatedAt.</param>
        /// <param name="DeleteddAt">DeleteddAt.</param>
        /// <param name="Deleted">Deleted.</param>
        /// <param name="UpdatedTo">UpdatedTo.</param>
        /// <param name="IsRoot">If this property set to true, user has access to any part of the services.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Parts">Parts.</param>
        public Role(int? Id = default(int?), string Description = default(string), DateTime? CreatedAt = default(DateTime?), DateTime? DeleteddAt = default(DateTime?), bool? Deleted = default(bool?), DateTime? UpdatedTo = default(DateTime?),  bool? IsRoot = default(bool?), string Name = default(string), List<RolePart> Parts = default(List<RolePart>))
        {
            this.Id = Id;
            this.Description = Description;
            this.CreatedAt = CreatedAt;
            this.DeleteddAt = DeleteddAt;
            this.Deleted = Deleted;
            this.UpdatedTo = UpdatedTo;
            this.IsRoot = IsRoot;
            this.Name = Name;
            this.Parts = Parts;
            
        }
        
        /// <summary>
        /// If this property set to true, user has access to any part of the services
        /// </summary>
        /// <value>If this property set to true, user has access to any part of the services</value>
        [DataMember(Name="isRoot")]
        public bool? IsRoot { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Parts
        /// </summary>
        [DataMember(Name="parts")]
        public List<RolePart> Parts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Role {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DeleteddAt: ").Append(DeleteddAt).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  UpdatedTo: ").Append(UpdatedTo).Append("\n");
            sb.Append("  IsRoot: ").Append(IsRoot).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Parts: ").Append(Parts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((Role)obj);
        }

        /// <summary>
        /// Returns true if Role instances are equal
        /// </summary>
        /// <param name="other">Instance of Role to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Role other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.DeleteddAt == other.DeleteddAt ||
                    this.DeleteddAt != null &&
                    this.DeleteddAt.Equals(other.DeleteddAt)
                ) && 
                (
                    this.Deleted == other.Deleted ||
                    this.Deleted != null &&
                    this.Deleted.Equals(other.Deleted)
                ) && 
                (
                    this.UpdatedTo == other.UpdatedTo ||
                    this.UpdatedTo != null &&
                    this.UpdatedTo.Equals(other.UpdatedTo)
                )&& 
                (
                    this.IsRoot == other.IsRoot ||
                    this.IsRoot != null &&
                    this.IsRoot.Equals(other.IsRoot)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Parts == other.Parts ||
                    this.Parts != null &&
                    this.Parts.SequenceEqual(other.Parts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                    if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                    if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                    if (this.DeleteddAt != null)
                    hash = hash * 59 + this.DeleteddAt.GetHashCode();
                    if (this.Deleted != null)
                    hash = hash * 59 + this.Deleted.GetHashCode();
                    if (this.UpdatedTo != null)
                    hash = hash * 59 + this.UpdatedTo.GetHashCode();
                    
                    if (this.IsRoot != null)
                    hash = hash * 59 + this.IsRoot.GetHashCode();
                    if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                    if (this.Parts != null)
                    hash = hash * 59 + this.Parts.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(Role left, Role right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Role left, Role right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
