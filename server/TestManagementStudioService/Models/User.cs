/*
 * TestManagement Studio Backend API
 *
 * <<Some text >>   Would respond with: ```js callbackFunction({     ... }); ``` 
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace TestManagementStudioService.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class User : Actor,  IEquatable<User>
    {


        public User() : base()
        {
            this.Email = default(String);
            this.Password = default(String);
            this.FirstName = default(String);
            this.LastName = default(String);
            this.Groups = new List<Group>();
            this.MemberOf = new List<Group>();
            this.Tests = new List<Test>();
            this.TestExecutions = new List<TestExecution>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="User" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Description">Description.</param>
        /// <param name="CreatedAt">CreatedAt.</param>
        /// <param name="DeleteddAt">DeleteddAt.</param>
        /// <param name="Deleted">Deleted.</param>
        /// <param name="UpdatedTo">UpdatedTo.</param>
        /// <param name="Permissions">Permissions.</param>
        /// <param name="CreatedBy">CreatedBy.</param>
        /// <param name="Roles">Roles.</param>
        /// <param name="TestSets">Tests to to be completed, assigned to the actor.</param>
        /// <param name="Email">Email.</param>
        /// <param name="Password">Password.</param>
        /// <param name="FirstName">FirstName.</param>
        /// <param name="LastName">LastName.</param>
        /// <param name="Groups">Groups which are created by the user.</param>
        /// <param name="MemberOf">MemberOf.</param>
        /// <param name="Tests">Tests created by the user.</param>
        /// <param name="TestExecutions">Tests are completed by the user.</param>
        public User(int? Id = default(int?), string Description = default(string), DateTime? CreatedAt = default(DateTime?), DateTime? DeleteddAt = default(DateTime?), bool? Deleted = default(bool?), DateTime? UpdatedTo = default(DateTime?), List<Permission> Permissions = default(List<Permission>), User CreatedBy = default(User), List<Role> Roles = default(List<Role>), List<TestSet> TestSets = default(List<TestSet>), string Email = default(string), string Password = default(string), string FirstName = default(string), string LastName = default(string), List<Group> Groups = default(List<Group>), List<Group> MemberOf = default(List<Group>), List<Test> Tests = default(List<Test>), List<TestExecution> TestExecutions = default(List<TestExecution>))
        {
            this.Id = Id;
            this.Description = Description;
            this.CreatedAt = CreatedAt;
            this.DeleteddAt = DeleteddAt;
            this.Deleted = Deleted;
            this.UpdatedTo = UpdatedTo;
            this.Permissions = Permissions;
            this.CreatedBy = CreatedBy;
            this.Roles = Roles;
            this.TestSets = TestSets;
            this.Email = Email;
            this.Password = Password;
            this.FirstName = FirstName;
            this.LastName = LastName;
            this.Groups = Groups;
            this.MemberOf = MemberOf;
            this.Tests = Tests;
            this.TestExecutions = TestExecutions;
            
        }
        
        /// <summary>
        /// Tests to to be completed, assigned to the actor
        /// </summary>
        /// <value>Tests to to be completed, assigned to the actor</value>
        [DataMember(Name="testSets")]
        public List<TestSet> TestSets { get; set; }
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email")]
        public string Email { get; set; }
        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password")]
        public string Password { get; set; }
        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }
        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="lastName")]
        public string LastName { get; set; }
        /// <summary>
        /// Groups which are created by the user
        /// </summary>
        /// <value>Groups which are created by the user</value>
        [DataMember(Name="groups")]
        public List<Group> Groups { get; set; }
        /// <summary>
        /// Gets or Sets MemberOf
        /// </summary>
        [DataMember(Name="memberOf")]
        public List<Group> MemberOf { get; set; }
        /// <summary>
        /// Tests created by the user
        /// </summary>
        /// <value>Tests created by the user</value>
        [DataMember(Name="tests")]
        public List<Test> Tests { get; set; }
        /// <summary>
        /// Tests are completed by the user
        /// </summary>
        /// <value>Tests are completed by the user</value>
        [DataMember(Name="testExecutions")]
        public List<TestExecution> TestExecutions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DeleteddAt: ").Append(DeleteddAt).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  UpdatedTo: ").Append(UpdatedTo).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  TestSets: ").Append(TestSets).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  MemberOf: ").Append(MemberOf).Append("\n");
            sb.Append("  Tests: ").Append(Tests).Append("\n");
            sb.Append("  TestExecutions: ").Append(TestExecutions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((User)obj);
        }

        /// <summary>
        /// Returns true if User instances are equal
        /// </summary>
        /// <param name="other">Instance of User to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(User other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.DeleteddAt == other.DeleteddAt ||
                    this.DeleteddAt != null &&
                    this.DeleteddAt.Equals(other.DeleteddAt)
                ) && 
                (
                    this.Deleted == other.Deleted ||
                    this.Deleted != null &&
                    this.Deleted.Equals(other.Deleted)
                ) && 
                (
                    this.UpdatedTo == other.UpdatedTo ||
                    this.UpdatedTo != null &&
                    this.UpdatedTo.Equals(other.UpdatedTo)
                ) && 
                (
                    this.Permissions == other.Permissions ||
                    this.Permissions != null &&
                    this.Permissions.SequenceEqual(other.Permissions)
                ) && 
                (
                    this.CreatedBy == other.CreatedBy ||
                    this.CreatedBy != null &&
                    this.CreatedBy.Equals(other.CreatedBy)
                ) && 
                (
                    this.Roles == other.Roles ||
                    this.Roles != null &&
                    this.Roles.SequenceEqual(other.Roles)
                ) && 
                (
                    this.TestSets == other.TestSets ||
                    this.TestSets != null &&
                    this.TestSets.SequenceEqual(other.TestSets)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.Password == other.Password ||
                    this.Password != null &&
                    this.Password.Equals(other.Password)
                ) && 
                (
                    this.FirstName == other.FirstName ||
                    this.FirstName != null &&
                    this.FirstName.Equals(other.FirstName)
                ) && 
                (
                    this.LastName == other.LastName ||
                    this.LastName != null &&
                    this.LastName.Equals(other.LastName)
                ) && 
                (
                    this.Groups == other.Groups ||
                    this.Groups != null &&
                    this.Groups.SequenceEqual(other.Groups)
                ) && 
                (
                    this.MemberOf == other.MemberOf ||
                    this.MemberOf != null &&
                    this.MemberOf.SequenceEqual(other.MemberOf)
                ) && 
                (
                    this.Tests == other.Tests ||
                    this.Tests != null &&
                    this.Tests.SequenceEqual(other.Tests)
                ) && 
                (
                    this.TestExecutions == other.TestExecutions ||
                    this.TestExecutions != null &&
                    this.TestExecutions.SequenceEqual(other.TestExecutions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                    if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                    if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                    if (this.DeleteddAt != null)
                    hash = hash * 59 + this.DeleteddAt.GetHashCode();
                    if (this.Deleted != null)
                    hash = hash * 59 + this.Deleted.GetHashCode();
                    if (this.UpdatedTo != null)
                    hash = hash * 59 + this.UpdatedTo.GetHashCode();
                    if (this.Permissions != null)
                    hash = hash * 59 + this.Permissions.GetHashCode();
                    if (this.CreatedBy != null)
                    hash = hash * 59 + this.CreatedBy.GetHashCode();
                    if (this.Roles != null)
                    hash = hash * 59 + this.Roles.GetHashCode();
                    if (this.TestSets != null)
                    hash = hash * 59 + this.TestSets.GetHashCode();
                    if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                    if (this.Password != null)
                    hash = hash * 59 + this.Password.GetHashCode();
                    if (this.FirstName != null)
                    hash = hash * 59 + this.FirstName.GetHashCode();
                    if (this.LastName != null)
                    hash = hash * 59 + this.LastName.GetHashCode();
                    if (this.Groups != null)
                    hash = hash * 59 + this.Groups.GetHashCode();
                    if (this.MemberOf != null)
                    hash = hash * 59 + this.MemberOf.GetHashCode();
                    if (this.Tests != null)
                    hash = hash * 59 + this.Tests.GetHashCode();
                    if (this.TestExecutions != null)
                    hash = hash * 59 + this.TestExecutions.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(User left, User right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(User left, User right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
