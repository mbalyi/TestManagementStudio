/*
 * TestManagement Studio Backend API
 *
 * <<Some text >>   Would respond with: ```js callbackFunction({     ... }); ``` 
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using TestManagementStudioService.Models;
using Swashbuckle.AspNetCore.SwaggerGen;

namespace TestManagementStudioService.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class RolesApiController : Controller
    { 


        /// <summary>
        /// Add a new role
        /// </summary>
        /// <remarks></remarks>
        /// <param name="name">Name of the role</param>
        /// <param name="accessToActors"></param>
        /// <param name="accessToCategories"></param>
        /// <param name="accessTests"></param>
        /// <response code="201">Return no content, but a redirection  header</response>
        /// <response code="401">Access denied</response>
        [HttpPost]
        [Route("/v1/roles")]
        [SwaggerOperation("AddRole")]
        [SwaggerResponse(200, type: typeof(string))]
        public virtual IActionResult AddRole([FromForm]string name, [FromForm]int? accessToActors, [FromForm]int? accessToCategories, [FromForm]int? accessTests)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            return new ObjectResult(example);
        }


        /// <summary>
        /// delete a role
        /// </summary>
        /// <remarks></remarks>
        /// <param name="roleId">The role identifier number</param>
        /// <response code="204">Successful operation</response>
        /// <response code="401">Access denied</response>
        /// <response code="404">Object not found</response>
        [HttpDelete]
        [Route("/v1/roles/{roleId}")]
        [SwaggerOperation("DeleteRole")]
        public virtual void DeleteRole([FromRoute]decimal? roleId)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Get a role
        /// </summary>
        /// <remarks></remarks>
        /// <param name="roleId">The role identifier number</param>
        /// <response code="200">The list of user objects</response>
        /// <response code="401">Access denied</response>
        /// <response code="404">Object not found</response>
        [HttpGet]
        [Route("/v1/roles/{roleId}")]
        [SwaggerOperation("GetRole")]
        [SwaggerResponse(200, type: typeof(List<User>))]
        public virtual IActionResult GetRole([FromRoute]decimal? roleId)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<User>>(exampleJson)
            : default(List<User>);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Get all roles in the system
        /// </summary>
        /// <remarks></remarks>
        /// <response code="200">The list of role objects</response>
        /// <response code="401">Access denied</response>
        [HttpGet]
        [Route("/v1/roles")]
        [SwaggerOperation("ListRoles")]
        [SwaggerResponse(200, type: typeof(List<Role>))]
        public virtual IActionResult ListRoles()
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Role>>(exampleJson)
            : default(List<Role>);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Update a role
        /// </summary>
        /// <remarks></remarks>
        /// <param name="roleId">The role identifier number</param>
        /// <param name="name">Name of the role</param>
        /// <param name="accessToActors"></param>
        /// <param name="accessToCategories"></param>
        /// <param name="accessTests"></param>
        /// <response code="204">Successful operation</response>
        /// <response code="401">Access denied</response>
        /// <response code="404">Object not found</response>
        [HttpPut]
        [Route("/v1/roles/{roleId}")]
        [SwaggerOperation("UpdateRole")]
        public virtual void UpdateRole([FromRoute]decimal? roleId, [FromForm]string name, [FromForm]int? accessToActors, [FromForm]int? accessToCategories, [FromForm]int? accessTests)
        { 
            throw new NotImplementedException();
        }
    }
}
