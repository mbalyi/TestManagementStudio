/*
 * TestManagement Studio Backend API
 *
 * <<Some text >>   Would respond with: ```js callbackFunction({     ... }); ``` 
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using TestManagementStudioService.Models;
using Swashbuckle.AspNetCore.SwaggerGen;

namespace TestManagementStudioService.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class GroupsApiController : Controller
    { 
        /// <summary>
        /// Add a new group
        /// </summary>
        /// <remarks></remarks>
        /// <param name="name">Name of the group</param>
        /// <param name="isGlobal"></param>
        /// <response code="201"></response>
        /// <response code="401">Access denied</response>
        [HttpPost]
        [Route("/v1/groups")]
        [SwaggerOperation("AddGroup")]
        [SwaggerResponse(200, type: typeof(Group))]
        public virtual IActionResult AddGroup([FromForm]string name, [FromForm]bool? isGlobal)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Group>(exampleJson)
            : default(Group);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Add a user as member of the group
        /// </summary>
        /// <remarks></remarks>
        /// <param name="groupId">The group identifier number</param>
        /// <param name="userId">Id of the user</param>
        /// <response code="201"></response>
        /// <response code="401">Access denied</response>
        [HttpPost]
        [Route("/v1/groups/{groupId}/members")]
        [SwaggerOperation("AddGroupMember")]
        [SwaggerResponse(200, type: typeof(Group))]
        public virtual IActionResult AddGroupMember([FromRoute]decimal? groupId, [FromForm]string userId)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Group>(exampleJson)
            : default(Group);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Add a role to the group
        /// </summary>
        /// <remarks></remarks>
        /// <param name="groupId">The group identifier number</param>
        /// <param name="roleId">Id of the role</param>
        /// <response code="201"></response>
        /// <response code="401">Access denied</response>
        [HttpPost]
        [Route("/v1/groups/{groupId}/roles")]
        [SwaggerOperation("AddGroupRole")]
        [SwaggerResponse(200, type: typeof(Group))]
        public virtual IActionResult AddGroupRole([FromRoute]decimal? groupId, [FromForm]string roleId)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Group>(exampleJson)
            : default(Group);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Delete a group
        /// </summary>
        /// <remarks></remarks>
        /// <param name="groupId">The group identifier number</param>
        /// <response code="204"></response>
        /// <response code="401">Access denied</response>
        [HttpDelete]
        [Route("/v1/groups/{groupId}")]
        [SwaggerOperation("DeleteGroup")]
        public virtual void DeleteGroup([FromRoute]decimal? groupId)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Remove a user from a group
        /// </summary>
        /// <remarks></remarks>
        /// <param name="groupId">The group identifier number</param>
        /// <param name="userId">The entity identifier number</param>
        /// <response code="204"></response>
        /// <response code="401">Access denied</response>
        [HttpDelete]
        [Route("/v1/groups/{groupId}/members/{userId}")]
        [SwaggerOperation("DeleteGroupMemeber")]
        public virtual void DeleteGroupMemeber([FromRoute]decimal? groupId, [FromRoute]decimal? userId)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// remove a role from the group
        /// </summary>
        /// <remarks></remarks>
        /// <param name="groupId">The group identifier number</param>
        /// <param name="roleId">The role identifier number</param>
        /// <response code="204"></response>
        /// <response code="401">Access denied</response>
        [HttpDelete]
        [Route("/v1/groups/{groupId}/roles/{roleId}")]
        [SwaggerOperation("DeleteGroupRole")]
        public virtual void DeleteGroupRole([FromRoute]decimal? groupId, [FromRoute]decimal? roleId)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Get a group
        /// </summary>
        /// <remarks></remarks>
        /// <param name="groupId">The group identifier number</param>
        /// <response code="200"></response>
        /// <response code="401">Access denied</response>
        [HttpGet]
        [Route("/v1/groups/{groupId}")]
        [SwaggerOperation("GetGroup")]
        [SwaggerResponse(200, type: typeof(Group))]
        public virtual IActionResult GetGroup([FromRoute]decimal? groupId)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Group>(exampleJson)
            : default(Group);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Get members of the group
        /// </summary>
        /// <remarks></remarks>
        /// <param name="groupId">The group identifier number</param>
        /// <response code="200"></response>
        /// <response code="401">Access denied</response>
        [HttpGet]
        [Route("/v1/groups/{groupId}/members")]
        [SwaggerOperation("ListGroupMembers")]
        [SwaggerResponse(200, type: typeof(User))]
        public virtual IActionResult ListGroupMembers([FromRoute]decimal? groupId)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<User>(exampleJson)
            : default(User);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Get roles of the group
        /// </summary>
        /// <remarks></remarks>
        /// <param name="groupId">The group identifier number</param>
        /// <response code="200"></response>
        /// <response code="401">Access denied</response>
        [HttpGet]
        [Route("/v1/groups/{groupId}/roles")]
        [SwaggerOperation("ListGroupRoles")]
        [SwaggerResponse(200, type: typeof(List<Group>))]
        public virtual IActionResult ListGroupRoles([FromRoute]decimal? groupId)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Group>>(exampleJson)
            : default(List<Group>);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Get all global group
        /// </summary>
        /// <remarks></remarks>
        /// <response code="200">The list of group objects</response>
        /// <response code="401">Access denied</response>
        [HttpGet]
        [Route("/v1/groups")]
        [SwaggerOperation("ListGroups")]
        [SwaggerResponse(200, type: typeof(List<Group>))]
        public virtual IActionResult ListGroups()
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Group>>(exampleJson)
            : default(List<Group>);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Update a group
        /// </summary>
        /// <remarks></remarks>
        /// <param name="groupId">The group identifier number</param>
        /// <param name="name">Name of the group</param>
        /// <response code="204"></response>
        /// <response code="401">Access denied</response>
        [HttpPut]
        [Route("/v1/groups/{groupId}")]
        [SwaggerOperation("UpdateGroup")]
        public virtual void UpdateGroup([FromRoute]decimal? groupId, [FromForm]string name)
        { 
            throw new NotImplementedException();
        }
    }
}
